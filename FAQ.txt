To get you started here are some answers to questions you might have.

1) What can I do with ENIGMA?
The purpose of ENIGMA is to combine alignment information, gene stuctures for those aligned species, and gene evidence for the target species to come up with the most likely gene structure for the target species. The shell script shellscripts/consensusGFF/consensusGFF.sh generates and tests a consensus gene structure for Medicago trunculata given alignments to and gene structures for Arabidopsis thaliana and Glycine max (soybean) along with est evidence, protein evidence, snap gene finder and augustus gene finder.

Additionally, this directory contains generator scripts that will generate random .stk alignment to test ENIGMA's performance. For example, the shell scripts in shellscripts/NumberOfRelatedSpecies test how the performance changes when more aligned species are added.

2) What isn't implemented?
The code that generates an .stk alignment (gffANDmaf_2_stk/sectionAlignmentsStk_stadn_strands.cpp) from gff3s does not yet take reading frame, UTRs or the type of evidence into account.

A grammar that will not allow stop codons to be spliced in (level 2) is not yet implemented.

3) What do I need to generate my own consensus gff?
A .maf file containing only ungapped alignments. gff3 format gene structure for each of the species in the .maf file except the target species. Gene evidence for the target species in gff3 format. A tree describing the lineage of the species in the .maf file.

4) How can I create my own consensus gff?
Use shellscripts/consensusGFF/consensusGFF.sh as a guide.

First you need to create ".info" file for each aligned species in the .maf file. An info needs three lines:
name
starts at 1
and has nbases
where name is the name that appears in the .maf file and n is the length of the genome/chromosome (section).

Next you need convert the information in the .maf into ".dot" format. This is done using dotplotter. The first argument is the .maf file. The next argument is the first .info file followed by a name for that species. Include all .info file followed by a name. The last two arguments are the names of the species whose alingnments will go into the .dot file. For each aligned species, generate a .dot file for the alignments betwee that species and the target. It is a good idea to remove short alignments using getdotsubset.

The next step step is to sort the alignments and remove overlaps using prepare4stk. Execute with arguments to get a description of the arguments you need. prepare4stk is a little buggy so make numAlignedSpecies 1 and just run multiple times. The simplified .dot is saved as goodmafs0 so rename before running prepare4stk again.

Depending on the amount of alignment, you may want to limit yourself to only looking at certain sections of the genome. prepare4stk will spit out a list of sections that have some alignment, followed by the amount of alignment. You can use choosesections to get only those sections that have a certain threshold of alignment. You can also list your own choice of sections or create one section that contains the entire genome, chromosome or region.

Now you are ready to generate an stk using sectionAlignmentsStk_stadn_strands. Execute without arguments to get a description of how to run. Reroot the phylogenetic tree so that the target species is the root.

To indicate which branchs have been reversed in the process of rerooting first expand the grammar grammars/L0_trans_strands_4transpose.eg. Then execute maketranspose with the names of nodes at the end of the reversed branches.

Now you are ready to get an ancestral reconstruction from xrate. First train with -t then use the trained grammar and -ar to get an ancestral reconstruction. Use simplify_ar to get an stk with ancestral reconstuction info.

Finally by sending the new stk and the position file generated by sectionAlignmentsStk_stadn_strands to stk2gff_strands you can get the ancestral reconstruction in gff3 format.

4) What are some things that still need improvement?
The generator codes have a memory leak.
As the grammar has become more complex, I have tacked new parts prepare4stk and sectionAlignmentsStk codes, making them a little messy.
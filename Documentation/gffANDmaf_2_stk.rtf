{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\margl1440\margr1440\vieww20220\viewh15560\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\b\fs36 \cf0 Overview\

\b0 \
	Here I am going to describe the process of getting an stk for crates. The evidence and related gene annotations must be in gff3 format and the alignments must be in the form of a .maf file consisting of a series of ungapped alignments.\
	The first step is to convert the .maf file into a set of .dot files, a format that I've invented for Enigma. The conversion is accomplished using the dotplotter program. It is advisable to limit ourselves to only those alignment that are "not short." In my testing I have defined "not short" to be at least 25 nucleotides. This can be accomplished with the getdotsubset2 program. Once the .dot file is created and limit to "not small" alignments it must sorted and further culled so that it only contains those alignments that will be useful to Enigma. This is accomplished by the prepare4stk program.\
	Once we have good .dot files we need to decide which sections of the gene we will send to Enigma. Since it is not useful to send Enigma sections that have no alignments, the prepare4stk program will dump a list of sections followed by the amount of exon evidence that is covered by an alignment. The choosesections program will allow you to limit yourself to only those sections which have a minimum alignment coverage. The choosesections will soon also merge several section lists.\
	Now that we have good alignments and know what sections of the genome we are going to annotate we can generate a stockholm format alignment (.stk.) This is the format used by xrate as input. The stk file is generated by sectionAlignmentsStk_stad_strands. Since columns in the stk file are allowed to vary in length, an additional position file is generated to indicate how the stk file aligns to the genome.\
	\
\
\

\b The gff3 format\

\b0 http://gmod.org/wiki/GFF
\b \
\
\
\
The .maf format
\b0 \
http://genome.ucsc.edu/FAQ/FAQformat\
\
\
\

\b The .dot file
\b0 \
Each row in a .dot file consists of three rows and describes a single alignment. The first two mark where the alignment begins in the two genomes. The third column is the length of the genome and the fourth and fifth columns are the direction that the alignment goes on each genome (in the same order as the first two columns.)\
\
\
\

\b dotplotter\

\b0 	The dotplotter program takes a .maf file and creates a .dot file containing alignment information about two of the genomes described in the .maf file. Since in my tests I am concatenating a series of medicago, soybean and arabidopsis sections, dotplotter also peroforms that concatenation. Information about this concatenation is given by "info files" (see below.) Optionally, with -a it can only give those lines that correspond to all way alignments of every species considered. The result is written to standard out.\
	The arguments for dotplotter are as follows: The .maf file, a series of info file pairs, the genome that will be in column 1, the genome that will be in column 2, an optional -a. The info file pairs are the location of an info file, followed by the species that info file is for. For expample:\
./dotplotter someMAF.maf ArabInfoFile Arabidopsis MediInfoFile Medicago SoyInfoFile Soybean Arabidopsis Medicago -a > ArabidopsisMedicagoDotFile.dot\
\
\

\b \
Info Files\

\b0 The format of an info file is a series of three line groups that look like\
arab_p1\
Starts at 1\
and has 106838bases\
where arab_p1 is the name of a section as it appears in the .maf file, 1 is the position of this section after concatenation and 106838 is the length of this section.\
\

\b \
\
getdotsubset\

\b0 This program allows you to limit a dot file to certain part of the genome or remove small alignments. The command line arguments are: the .dot file, the minimum genome position for the first column species, the maximum position for the first column species, the minimum position for the second column species, the maximum position for the second column species, the minimum alignment length. \cf2 \CocoaLigature0 For example to limit ourself to only alignments that are at least 25 long:\cf0 \CocoaLigature1 \
./getdotsubset originalDot.dot 1 m 1 n 25 > limitedDot.dot, where m >= length of genome 1, n >= length of genome 2.\
\
\
\

\b prepare4stk
\b0  \
	This program sorts the alignments according to position on the target genome, then groups them into blocks based where the evidence says the gene ends. Blocks begin when one piece of evidence finds a CDS and ends when all evidence sources agree on an intergenic region. For each block on the target genome, prepare4stk finds all genes that align to that block. If two alignments from a single block to the same gene cross, the smaller one is deleted. Finally a set of aligned genes is chosen such that out of all the alignment to those genes, no pair cross and such that the total length of alignment is maximized. The alignments to those genes are kept, all others are discarded. Alignments that cover more species are given preference. In other words if a 3 way alignment overlaps a 2 way alignment, the 3 way alignment will be kept even if it is shorter. Finally for each block the fraction of predicted CDS/exon that is covered by an alignment is calculated. A list of all sections with at least some alignment followed by the calculated alignment overlap is output to standard out. The alignments which are kept are written to "goodmaf0."\
	The command line arguments are as follows: 1 (not used), a label for the aligned species (not used), location of the dotfile, position of target species in dot file (whether it is column 0 or 1), position of aligned species, a gff3 file annotation the aligned genome, a label for the target species, number of evidence sources, gff3 files for those evidence sources, start of target genome (usually 1), end of target genome (or a number larger than the length of the genome if you want to consider the whole genome.) For example:\
./prepare4stk 1 A SomeDotFile.dot 1 0 gff3forAlignedSpecies.gff M 4 est.gff proteinAlignment.gff geneFinder1.gff geneFinder2.gff 1 1500000 > alignmentSections\
\
\
\

\b choosesections\

\b0 This program reads through one or more outputs of prepare4stk and gives only those sections that have an exon evidence alignment coverage score (EAC) above a certain threshold. The command line arguments are: outputs from prepare4stk, a threshold for EAC. For example:\
./choosesections alignmentSections1 alignmentSections2 .1 > alignmentSectionsMinIs0.1
\b \
\
\
\
sectionAlignmentStk_stadn_strands\

\b0 	This program is responsible for creating a Stockholm format file and a position file that contains the alignment and gff3 information that serves as input for Enigma. For each section, sectionAlignmentStk_stadn_strands moves across the target genome finding the letter for each row (evidence and aligned species) at each position. If one of those letters is different from the last letter, a column is added and the position is written to the position file. Letters for evidence are found simply by looking in the gff3 files. Letters for aligned species are somewhat more complicated to find. If there is an alignment at the position of interest, we can look in the gff3 file for the aligned genome. However despite the fact that intergenic regions and introns are generally not conserved we would still like to align them when possible. To this, if we are in a section with no alignment, we look backwards for the last nucleotide that is aligned. We do the same thing in forward direction, finding the next aligned nucleotide. If both nucleotides are aligned to the same intron or intergenic region, we put the corresponding 'i' or 'x' in the aligned species row. Otherwise we put a '*'. This indicates to xrate that we have no idea what letter should be in that row. Finally if the alignment doesn't go the same direction on each species then we have to reverse the strand for that row.\
	The command lines arguments are: Number of aligned species, row label for the first aligned species, .dot file for that species (use only that has been culled by prepare4stk), position of the target species in the .dot file (column 0 or 1), position of the aligned species, gff3 file for the aligned genome, row label for the second aligned species, \'85 , label for the target species, number of evidence gff3 files, evidence gff3 files, a place that the stk column position can be written to, the list of sections that Enigma is to annotate, a tree in Newick / New Hampshire format describing (see note on tree below). For example:\
./sectionAlignmentsStk 2 A culled_AM_dotFile.dot 1 0 A.gff S culled_SM_dotFile.dot 1 0 S.gff M 4 est.gff proteinAlignment.gff geneFinder1.gff geneFinder2.gff placeForPositions.pos listOfSectionsToAnnotate "(((M1:.1,M2:.1,M3:.1,M4:.1)M:.5,(S1:.1)S:.5)MS:.4,(A1:.1)A:.9)AMS" > stk4xrate.stk\
Note on the tree: In addition to relations between the genomes, you must also make sure the evidence nodes are descendants of the target node. They are automatically named X1, X2, X3, \'85 , where X is the target label given in the command line. Finally currently all leaves are considered evidence, to indicate that the aligned genomes are actual annotations, add a dummy child node (S1 and A1 in the example.) You don't need to add corresponding dummy rows, but if you don't xrate will spit out a lot of warnings. At some point I intend to automate this so that you need only give the species relations.\

\b \
\
\
Stockholm format\

\b0 The alignment input used by xrate. http://en.wikipedia.org/wiki/Stockholm_format}
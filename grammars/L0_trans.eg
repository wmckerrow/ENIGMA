;; A grammar to predict consensus gene structure based on several sources of evidence
;; To see how the macros expand, type the following:
;;  echo | xrate -g dart/grammars/geneStructure.eg -x expanded.eg
;;  less expanded.eg

;; Here begins the grammar.  
(grammar
 (name geneStructure)
 (parametric)

 ;; **** BEGIN PARAMETER DEFINITIONS  ****
 
 ;; Define a seed rate to initialize the training of rate parameters
 ;; Supposedly, setting this at a low value works best, though EM is reasonably robust. 
 (&define SEED 0.001)
 (&define species_SEED 0.1)
 (&define observation_SEED 0.01)
 
 ;; Probability parameters - used for initial distributions and production rules. 
 ;; Note that each 'category' nonterminal has its own equilibrium distribution
 ;; These are currently set as uniform - one might set this a bit more 'skewed' towards
 ;; the type of token that a nonterminal is expected to emit. 
 (&foreach 
  category
  (E_cons I_cons X_cons S_cons T_cons A_cons D_cons F_cons J_cons Y_cons)
  (&foreach-token TOK 
   (&if
    (&or
     (&and (&eq category E_cons) (&eq TOK e))
     (&and (&eq category I_cons) (&eq TOK i))
     (&and (&eq category X_cons) (&eq TOK x))
     (&and (&eq category S_cons) (&eq TOK s))
     (&and (&eq category T_cons) (&eq TOK t))
     (&and (&eq category A_cons) (&eq TOK a))
     (&and (&eq category D_cons) (&eq TOK d))
     (&and (&eq category F_cons) (&eq TOK f))
     (&and (&eq category J_cons) (&eq TOK j))
     (&and (&eq category Y_cons) (&eq TOK y))
    )
    (const (((&cat p_ category _ TOK) 1 )))
    (const (((&cat p_ category _ TOK) 0 ))) ) 
   )
  )
  
 (pgroup
  ;; Initial distribution over categories as governed by the start -> category transitions
  ((&foreach category (E_cons I_cons X_cons S_cons T_cons A_cons D_cons F_cons J_cons Y_cons) ((&cat START2 category) (&div 1 10)) ) )
  
  ;; Probabilities of going from / staying in a given category at the CONSENSUS (e.g. root) level
  ((E_cons2E_cons .7) (E_cons2T_cons .1) (E_cons2D_cons .1) (E_cons2F_cons .1))
  ((I_cons2I_cons .7) (I_cons2A_cons .2) (I_cons2J_cons .1))
  ((X_cons2X_cons .7) (X_cons2S_cons .2) (X_cons2Y_cons .1))
  )

 ;; Rate parameters - one set governs the inter-species changes and another the 'observation' 
 ;; These are (for now) shared among the different chains used by the {E,I,X}_cons nonterminals
 (&foreach 
  TYPE 
  (species)
  (&foreach 
   SRC
   (e i x)
   (&foreach 
    DEST
    (e i x)
    (&if 
     (&eq SRC DEST) 
     ()
     (rate ((&cat TYPE _ SRC _ DEST) (&cat SEED) ) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 (&foreach
  TYPE
  (species)
  (&foreach
   SRC
   (s t a d f j y)
   (&foreach
    DEST
    (s t a d f j y)
    (&if
     (&eq SRC DEST)
     ()
     (rate ((&cat TYPE _ SRC _ DEST) (&cat SEED) ) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 ;; Rate parameters - one set governs the inter-species changes and another the 'observation'
 ;; These are (for now) shared among the different chains used by the {E,I,X}_cons nonterminals
 (&foreach
  TYPE
  (species)
  (&foreach
   SRC
   (e i x)
   (&foreach
    DEST
    (s t a d f j y)
    (&if
     (&eq SRC DEST)
     ()
     (const (((&cat TYPE _ SRC _ DEST) 0 )) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 ;; Rate parameters - one set governs the inter-species changes and another the 'observation'
 ;; These are (for now) shared among the different chains used by the {E,I,X}_cons nonterminals
 (&foreach
  TYPE
  (species)
  (&foreach
   SRC
   (s t a d f j y)
   (&foreach
    DEST
    (e i x)
    (&if
     (&eq SRC DEST)
     ()
     (const (((&cat TYPE _ SRC _ DEST) 0 )) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 (&foreach-leaf
  TYPE
  (&foreach
   SRC
   (e i x)
   (&foreach
    DEST
    (e i x)
    (&if
     (&eq SRC DEST)
     ()
     (rate ((&cat TYPE _ SRC _ DEST) (&cat SEED) ) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 (&foreach-leaf
  TYPE
  (&foreach
   SRC
   (s t a d f j y)
   (&foreach
    DEST
    (s t a d f j y)
    (&if
     (&eq SRC DEST)
     ()
     (rate ((&cat TYPE _ SRC _ DEST) (&cat SEED) ) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 (&foreach-leaf
  TYPE
  (&foreach
   SRC
   (e i x)
   (&foreach
    DEST
    (s t a d f j y)
    (&if
     (&eq SRC DEST)
     ()
     (const (((&cat TYPE _ SRC _ DEST) 0 )) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 (&foreach-leaf
  TYPE
  (&foreach
   SRC
   (s t a d f j y)
   (&foreach
    DEST
    (e i x)
    (&if
     (&eq SRC DEST)
     ()
     (const (((&cat TYPE _ SRC _ DEST) 0 )) ) )
    ) ;; end DEST
   ) ;; end SRC
  ) ;; end TYPE

 ;; **** END PARAMETER DEFINITIONS  ****

 ;; **** BEGIN MARKOV CHAIN DEFINITIONS  ****

 ;; Define species_chain and observation_chain
 ;; These are identical in form, but they have separate parametrizations
 (&foreach 
  category 
  (E_cons I_cons X_cons S_cons T_cons A_cons D_cons F_cons J_cons Y_cons)
  (&foreach
   TYPE
   (species)
   ;; Define the Markov chains for residue substitution ( i - e - x )
   ;; There are two of these for each category - one for species-level evo and one observations
   (chain
    (update-policy parametric)
    (terminal ((&cat category _ TYPE)))
    
    ;; Initial probability distributions - call forth the parameters declared in the pgroup block above
    (&foreach-token
     TOK
     (initial (state (TOK)) (prob (&cat p_ category _ TOK)))
     )
    
    ;; Mutation rates - simply call forth the parameters declared in the rate blocks above
    (&foreach-token
     SRC
     (&foreach-token
      DEST
      (&if
       (&eq SRC DEST)
       ()
       (mutate (from (SRC)) (to (DEST)) (rate (&cat TYPE _ SRC _ DEST) ) )
;;e.g.:(mutate (from (e))   (to (x))    (rate species_e_x))
       )
      )
     )
    ) ;; end chain
   ) ;; end types
  ) ;; end categories

 (&foreach
  category
  (E_cons I_cons X_cons S_cons T_cons A_cons D_cons F_cons J_cons Y_cons)
  (&foreach-leaf
   TYPE
   ;; Define the Markov chains for residue substitution ( i - e - x )
   ;; There are two of these for each category - one for species-level evo and one observations
   (chain
    (update-policy parametric)
    (terminal ((&cat category _ TYPE)))
    
    ;; Initial probability distributions - call forth the parameters declared in the pgroup block above
    (&foreach-token
     TOK
     (initial (state (TOK)) (prob (&cat p_ category _ TOK)))
     )
    
    ;; Mutation rates - simply call forth the parameters declared in the rate blocks above
    (&foreach-token
     SRC
     (&foreach-token
      DEST
      (&if
       (&eq SRC DEST)
       ()
       (mutate (from (SRC)) (to (DEST)) (rate (&cat TYPE _ SRC _ DEST) ) )
;;e.g.:(mutate (from (e))   (to (x))    (rate species_e_x))
       )
      )
     )
    ) ;; end chain
   ) ;; end types
  ) ;; end categories

 ;; Done defining regular chains

 
 ;; Define the hybrid chains, which are composed of a category_species chain and a category_observation components
 ;; The observation chain models transitions on terminal branches (leading to "leaves") 
 ;; and the species chain models transitions on the internal branches. 
 ;; This declaration is a bit hairy, since we've got multiple loops *within* the components block.  See this page for details on hybrids:
 ;; http://biowiki.org/XrateFormat#Hybrid_chains
 (&foreach 
  category
  (E_cons I_cons X_cons S_cons T_cons A_cons D_cons F_cons J_cons Y_cons)
  (hybrid-chain
   (terminal ((&cat category _ species-obs-hybrid))) ;; Name the hybrid chain based on the category it emits from.
   (row ?) ;; We'd like the label (below) to correspond to a node name (again, see biowiki link above).
   (components ;; Define the components of the hybrid chain - this is based on whether or not the branch is *terminal*
    (&foreach-leaf
     NODE
     ((label NODE) (terminal ((&cat category _ NODE)))) ;; for branches leading to leaves - use the observation chain
     );; end leaf
    (&foreach-ancestor
     NODE
     ((label NODE) (terminal ((&cat category _ species)))) ;; for branches leading to ancestral nodes - use the species chain
     ) ;; end ancestor
    );; end components
   );; end hybrid chain
  );; end category
 ;; Done defining hybrid chains
 
 ;; **** END MARKOV CHAIN DEFINITIONS  ****

 ;; **** BEGIN TOP-LEVEL PRODUCTION RULES **** 

 ;; Transitions from start
 (&foreach 
  category
  (E_cons I_cons X_cons S_cons T_cons A_cons D_cons F_cons J_cons Y_cons)
  (transform  (from (START))  (to (category)) (prob (&cat START2 category)))
  )
 ;; START->END transition ensures that empty alignments don't have zero likelihood
 (transform (from (START))  (to ()))

 ;; Emit rules
 (transform (from (E_cons)) (to (E_cons_species-obs-hybrid E_cons*)) (gaps-ok))
 (transform (from (I_cons)) (to (I_cons_species-obs-hybrid I_cons*)) (gaps-ok))
 (transform (from (X_cons)) (to (X_cons_species-obs-hybrid X_cons*)) (gaps-ok))
 (transform (from (S_cons)) (to (S_cons_species-obs-hybrid S_cons*)) (gaps-ok))
 (transform (from (T_cons)) (to (T_cons_species-obs-hybrid T_cons*)) (gaps-ok))
 (transform (from (A_cons)) (to (A_cons_species-obs-hybrid A_cons*)) (gaps-ok))
 (transform (from (D_cons)) (to (D_cons_species-obs-hybrid D_cons*)) (gaps-ok))
 (transform (from (F_cons)) (to (F_cons_species-obs-hybrid F_cons*)) (gaps-ok))
 (transform (from (J_cons)) (to (J_cons_species-obs-hybrid J_cons*)) (gaps-ok))
 (transform (from (Y_cons)) (to (Y_cons_species-obs-hybrid Y_cons*)) (gaps-ok))

 ;; End rules
 (transform (from (E_cons*)) (to ()) (prob 1))
 (transform (from (I_cons*)) (to ()) (prob 1))
 (transform (from (X_cons*)) (to ()) (prob 1))
 (transform (from (S_cons*)) (to ()) (prob 1))
 (transform (from (T_cons*)) (to ()) (prob 1))
 (transform (from (A_cons*)) (to ()) (prob 1))
 (transform (from (D_cons*)) (to ()) (prob 1))
 (transform (from (F_cons*)) (to ()) (prob 1))
 (transform (from (J_cons*)) (to ()) (prob 1))
 (transform (from (Y_cons*)) (to ()) (prob 1))
 
 ;; Production rules for transitions between categories
 (transform (from (X_cons*)) (to (Y_cons)) (prob X_cons2Y_cons))
 (transform (from (Y_cons*)) (to (X_cons)) (prob 1))
 (transform (from (X_cons*)) (to (X_cons)) (prob X_cons2X_cons))
 (transform (from (X_cons*)) (to (S_cons)) (prob X_cons2S_cons))
 (transform (from (S_cons*)) (to (E_cons)) (prob 1))
 (transform (from (E_cons*)) (to (F_cons)) (prob E_cons2F_cons))
 (transform (from (F_cons*)) (to (E_cons)) (prob 1))
 (transform (from (E_cons*)) (to (E_cons)) (prob E_cons2E_cons))
 (transform (from (E_cons*)) (to (D_cons)) (prob E_cons2D_cons))
 (transform (from (D_cons*)) (to (I_cons)) (prob 1))
 (transform (from (I_cons*)) (to (J_cons)) (prob I_cons2J_cons))
 (transform (from (J_cons*)) (to (I_cons)) (prob 1))
 (transform (from (I_cons*)) (to (I_cons)) (prob I_cons2I_cons))
 (transform (from (I_cons*)) (to (A_cons)) (prob I_cons2A_cons))
 (transform (from (A_cons*)) (to (E_cons)) (prob 1))
 (transform (from (E_cons*)) (to (T_cons)) (prob E_cons2T_cons))
 (transform (from (T_cons*)) (to (X_cons)) (prob 1))

 ) ;; end grammar geneStructure

;; **** END TOP-LEVEL PRODUCTION RULES **** 

(alphabet
 (name geneStructure)
 (token (e i x s t a d f j y))
 (wildcard *)
 ) ;; end alphabet geneStructure

